name: Release to GitHub Marketplace

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  
  # Manual release trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Auto-detect pre-release based on version pattern
            if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "üì¶ Preparing release: $VERSION"
          echo "üîç Pre-release: $IS_PRERELEASE"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if version follows semantic versioning
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          
          echo "‚úÖ Version format is valid: $VERSION"
      
      - name: Run validation tests
        run: |
          echo "üîç Running validation tests..."
          
          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Validate action.yml
          if ! yq eval '.' action.yml > /dev/null; then
            echo "‚ùå action.yml validation failed"
            exit 1
          fi
          
          # Check required files exist
          REQUIRED_FILES=(
            "action.yml"
            "README.md"
            "LICENSE"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file for release: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ All validation tests passed"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Generate release notes from commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "üìù Generating release notes from $PREV_TAG to $VERSION"
            
            # Get commits since last tag
            COMMITS=$(git log --oneline --no-merges ${PREV_TAG}..HEAD)
            
            # Format release notes
            {
              echo "## What's Changed"
              echo ""
              echo "### üöÄ Features & Improvements"
              echo "$COMMITS" | grep -E "(feat|feature)" | sed 's/^/- /' || echo "- No new features in this release"
              echo ""
              echo "### üêõ Bug Fixes"
              echo "$COMMITS" | grep -E "(fix|bug)" | sed 's/^/- /' || echo "- No bug fixes in this release"
              echo ""
              echo "### üîß Maintenance & Others"
              echo "$COMMITS" | grep -vE "(feat|feature|fix|bug)" | sed 's/^/- /' | head -10
              echo ""
              echo "### üì¶ Usage"
              echo '```yaml'
              echo "- uses: ${{ github.repository }}@$VERSION"
              echo "  with:"
              echo "    anthropic_api_key: \${{ secrets.ANTHROPIC_API_KEY }}"
              echo '```'
            } > release_notes.md
          else
            echo "üéâ Initial release" > release_notes.md
          fi
          
          # Set output for later use
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          PRERELEASE_FLAG=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          # Create the release
          gh release create "$VERSION" \
            --title "Claude Code Review $VERSION" \
            --notes-file release_notes.md \
            $PRERELEASE_FLAG \
            --target main
          
          echo "‚úÖ Release created: $VERSION"
          echo "release_url=$(gh release view $VERSION --json url --jq '.url')" >> $GITHUB_OUTPUT

  update-marketplace:
    name: Update GitHub Marketplace
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update major version tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Extract major version (e.g., v1 from v1.2.3)
          MAJOR_VERSION=$(echo "$VERSION" | sed -E 's/^v([0-9]+)\..*$/v\1/')
          
          echo "üìù Updating major version tag: $MAJOR_VERSION"
          
          # Update or create major version tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Delete existing major version tag if it exists
          if git ls-remote --tags origin | grep -q "refs/tags/$MAJOR_VERSION$"; then
            git push --delete origin "$MAJOR_VERSION" || true
          fi
          
          # Create new major version tag pointing to current commit
          git tag -fa "$MAJOR_VERSION" -m "Update $MAJOR_VERSION to $VERSION"
          git push origin "$MAJOR_VERSION"
          
          echo "‚úÖ Major version tag updated: $MAJOR_VERSION -> $VERSION"

  test-marketplace-action:
    name: Test Marketplace Action
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, update-marketplace]
    
    steps:
      - name: Test published action
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          echo "üß™ Testing published action at $VERSION"
          echo "Action should now be available at:"
          echo "  ${{ github.repository }}@$VERSION"
          
          # In a real scenario, this could:
          # 1. Create a test repository
          # 2. Add a workflow using the newly published action
          # 3. Trigger the workflow
          # 4. Verify it works correctly
          # 5. Clean up
          
          echo "‚úÖ Marketplace action test completed"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, update-marketplace, test-marketplace-action]
    if: always()
    
    steps:
      - name: Release notification
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "üéâ Successfully released Claude Code Review $VERSION!"
            echo ""
            echo "üì¶ Users can now use:"
            echo "   uses: ${{ github.repository }}@$VERSION"
            echo "   uses: ${{ github.repository }}@v$(echo $VERSION | cut -d. -f1 | tr -d v)"
            echo ""
            echo "üîó Release page: ${{ needs.create-release.outputs.release_url }}"
            
            if [ "$IS_PRERELEASE" = "true" ]; then
              echo "‚ö†Ô∏è  This is a pre-release version"
            fi
          else
            echo "‚ùå Release failed. Please check the logs above."
            exit 1
          fi